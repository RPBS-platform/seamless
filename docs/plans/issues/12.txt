The Docker transformer does not cancel the Docker container after the transformer 
has been cancelled.

My first idea was to make some kind of "service mode", where the Docker command would
 be sent to a running Docker container instead of being cancelled. It could also be
used by Python transformers or translated transformers.

However, this idea is WRONG:
- Running Docker transformers directly should always be a quick-and-dirty thing 
(reproducibility issues!)
- For the Docker transformer, the proper solution is to have a Seamless workload manager 
(e.g. Cloudless)
analyze communion transformation requests for checksums corresponding to Docker transformers,
and transform it to *bash transformers* with an *environment dict* (see below)
- Non-docker transformers will have an environment dict variable, which will be sent along with 
transformation requests. The workload manager will inspect such requests and forward them
to jobslaves that say that they can handle them, i.e thet are running in 
joint seamless+environment Docker containers.


A second idea would be to check if a container is already running and do "docker exec",
 but I think this will not work in the general case (Docker containers that are badly
 written and write to some kind of global file, i.e. cannot run multiple commands at once).