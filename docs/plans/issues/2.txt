Debugging transformers in Seamless
==================================

Debugging is a pain in the ass. This is because debuggers for Python and C
    a) claim the tty; and/or:
    b) have a file-centric view of the world; and/or:
    c) are opinionated about threads vs processes.
Seamless prefers to clean up its mess, i.e. delete files after compilation.
(Only the compiled Python module file is kept, for now; TODO: find a way to change this).
Jupyter (and IPython) claim the tty; if this interferes, you may convert your
notebook to a Python script and execute it with Python. If, at the end, you
do asyncio.get_event_loop().run_forever(), Seamless will keep listening for events
(worker, mount, share, communion,mreactor edits), without claiming the tty.
All Python debuggers will work like this (but see below).

Transformers are executed as **processes**. At the moment (version 0.2),
there is a flag to run them as threads instead. But this can bring all kinds of
problems (e.g. transformer threads will be killed
by a dirty hack when the transformer needs to restart; also, a segfault will
bring down all of Seamless), not sure if this flag will be kept.

CONCRETE ISSUES:

1) Python debuggers have trouble with processes;
for this reason, Seamless includes a patched version of pdb that does
work with processes. Still, none of them work inside Jupyter within processes.
See tests/highlevel/python-debugger.py for notes on debugging Python transformers.

2) For compiled transformers, the .debug option will not only save debugging symbols;
it will also print out the pid and pause it until it receives SIGUSR1.
gdb attach + signal SIGUSR1 will work, except that:
- Visual Studio Code does not work with gdb in this manner (communication goes wrong)
- In Ubuntu, you need to be sudo gdb to attach.

UPDATE: VS code now works for C/C++.
Best approach:
- expose .vscode/launch.json to the Seamless Docker container: TODO let Seamless look for it in /cwd/.vscode/launch.json .c
- TODO: Let Seamless synthesize an entry to launch.json, as follows:
        container ID: c121bde3bd57 (is now exposed as /home/jovyan/DOCKER_CONTAINER)
        transformer process ID: 1114
        build dir: /tmp/seamless-extensions/seamless_module_01ec725d4bf65b54f6c807f8380e88f71713f9abd6d3579eb69593dc15ccde83
        name of main.cpp as mounted: /tmp/code.cpp (need mount mapping; supported are either /tmp or /cwd (translated using $HOSTCWD))

        {
            "name": "ctx.tf: debug Seamless C/C++ transformer",
            "type": "cppdbg",
            "request": "attach",
            "program": "/opt/conda/bin/python",
            "processId": "1114",
            "pipeTransport": {
                "debuggerPath": "/usr/bin/gdb",
                "pipeProgram": "docker",
                "pipeArgs": ["exec", "-u", "root", "--privileged", "-i", "c121bde3bd57", "sh", "-c"],
                "pipeCwd": ""
            },
            "sourceFileMap": {
                "/tmp/seamless-extensions/seamless_module_01ec725d4bf65b54f6c807f8380e88f71713f9abd6d3579eb69593dc15ccde83/main.cpp":"/tmp/code.cpp"
            },
            //NOT WORKING: "skipFiles": ["/build/glibc-S7xCS9/glibc-2.27/sysdeps/unix/sysv/linux/select.c"],
            "MIMode": "gdb",
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                },
            ]
        },
- In VSCode, launch the ctx.tf debugger in the debugger icon menu.
  Then, press F6, and press Esc to ignore the "Cannot find select.c" error message
  then press Ctrl+Shift+Y, and type "-exec break".
  Make sure that you have some breakpoint set by now.
  Then, type "-exec signal SIGUSR1" and press Esc to ignore the "Cannot find select.c" error message
  Finally, press F5
