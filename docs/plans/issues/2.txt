Debugging transformers in Seamless
==================================

Debugging is a pain in the ass. This is because debuggers for Python and C
    a) claim the tty; and/or:
    b) have a file-centric view of the world; and/or:
    c) are opinionated about threads vs processes.
Seamless prefers to clean up its mess, i.e. delete files after compilation.
(Only the compiled Python module file is kept, for now; TODO: find a way to change this).
Jupyter (and IPython) claim the tty; if this interferes, you may convert your
notebook to a Python script and execute it with Python. If, at the end, you
do asyncio.get_event_loop().run_forever(), Seamless will keep listening for events
(worker, mount, share, communion,mreactor edits), without claiming the tty.
All Python debuggers will work like this (but see below).

Transformers are executed as **processes**. At the moment (version 0.2),
there is a flag to run them as threads instead. But this can bring all kinds of
problems (e.g. transformer threads will be killed
by a dirty hack when the transformer needs to restart; also, a segfault will
bring down all of Seamless), not sure if this flag will be kept.

CONCRETE ISSUES:

1) Python debuggers have trouble with processes;
for this reason, Seamless includes a patched version of pdb that does
work with processes. Still, none of them work inside Jupyter within processes.
See tests/highlevel/python-debugger.py for notes on debugging Python transformers.

2) For compiled transformers, the .debug option will not only save debugging symbols;
it will also print out the pid and pause it until it receives SIGUSR1.
gdb attach + signal SIGUSR1 will work, except that:
- Visual Studio Code does not work with gdb in this manner (communication goes wrong)
- In Ubuntu, you need to be sudo gdb to attach. This prevents gdbgui from working.
Once you disable the sudo requirement in Ubuntu, gdbgui works fine.
The seamless-cli Docker commands now contain optons

3) It is extremely annoying that all debuggers use breakpoints based on file names.
When debugging, you will have to tell the debugger where to find your source files.
This is not as easy to spoof for compiled code as it is for Python.
For debugging, the file name is always that of the file name on disk during compilation.
But you *can* set the file *path* with gcc option: -fdebug-prefix-map=old=new
The original file path will be something like /tmp/<path of your transformer>
Alternatively, you can set the directory search path in gdb to find the source.
The code in Transformer.code will always be called "main" (main.c, main.cpp, ...).
The code in the binary module will have the name of the object.

4) For compiled transformers, inline functions give trouble in debugging mode.
At least on my desktop machine, it refuses to link (missing symbols).
On my laptop, it simply segfaults. Could be a bug in distutils/cffi.
TODO: verify that this is still the case...


TODO?:
  - Set virtual filenames for (non-compiled) transformers. See tests/highlevel/python-debugging.py
    Maybe integrate with gdbgui
