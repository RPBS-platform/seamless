It is important to deliver Seamless graph results as demonstrated web pages that can
 be inspected and visualized (in the browser) 
 without being backed up by a Seamless instance.
Jupyter Notebook widgets have something like that (embed widget state)
 but it does not work very well in most cases.

In any case, we can do much better than Jupyter widgets.
Some preliminary tests (see ../notebook-html-test), show that under most circumstances,
raw HTML, raw Notebooks and HTML-converted Notebooks can access Seamless cells 
that have been dumped to a file.
Such HTML/Notebook files can be served by github.io (not github.com) and/or nbviewer.jupyter.org
What is needed is to adapt seamless-client.js so that it can run in "static mode":
instead of getting the pulse of cell value updates from the Seamless websocket server,
it will obtain each cell value once, from a single GET request (that will normally resolve
to a file). Changes (from JS) of the cell (in JS) will trigger the onchange() callback,
but will obviously not call Seamless.
To make this work, in static mode, the Seamless client should request ./SEAMLESS-STATIC and read all
 shares, then read each cell in the sharelist.
The Seamless client could be initialized in mode=static, mode=dynamic or mode=both, where
it is first tried to read ./SEAMLESS-STATIC, and if that fails, a standard dynamic connection is made.

On the long run, one could also add a mode=graph. Here, the Seamless client tries to request graph.seamless.
If it succeeds, it is parsed as JSON, the shares are identified, as well as their checksums. These checksums
are then read from some kind of checksum-to-buffer server.

Note that seamless-client.js is and always will be about providing *buffers*. Parsing them to values has to
be done manually in JS.

