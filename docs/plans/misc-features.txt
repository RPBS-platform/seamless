High priority:
- hcell, hrc and htf refer to the node. Should be renamed.
- Meta-data for cells and transformers

Medium priority:
- Unify docker transformer and bash transformer
- Support more foreign languages: Julia, R, JavaScript. IPython magics, also have a look at python-bond

Low priority:
- "Fallback". During development: A value for a cell that is used if upstream-None, i.e. if someone else is working upstream.

Very low priority:
- Meta-schema for schema editing (jsonschema has it)

- API to construct transformations without low-level contexts, launch them, and to check for cache hits.
  Application 1: to implement efficient non-deterministic execution that gives a deterministic result.
  Examples are: reduce or sort on deep cells that arrive piece-meal, or where the data may be near or far.
  Application 2: cyclic dependencies.

- Simplified implementations, with various levels of reduced interactivity
  1. Frozen low-level macros. All cells on which low-level macros depend are frozen.
  2. Frozen code cells. The code cells of all transformers and reactors are frozen.
  Code cells are considered both at the high-level and at the low-level implementation,
  i.e. a C++ transformer has its C++ code frozen, as well as the Python code that
  implements the cffi interface.
  3. Everything frozen. The graph is considered as a single computation that should yield
  the designated result cells. No interactivity, authority never changes
  => editpins are also forbidden.

- Specialized client implementations for special constructs

- Other *host* implementations than Python... JavaScript? Erlang? Elixir? Go?

- Re-implement all high level classes as Silk classes with methods in their schema.
