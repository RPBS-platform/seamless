UPDATE: move this to the Cloudless project

1. Spin off seamless-tools into a package that does not depend on Seamless.
It will contain:

- /docker/commands (also for redis, e.g. redis-add-zip)

- The Seamless graph server (take some inspiration from the cloudless plan, but keep it simpler).
The heart of it will be a Python dynamic HTTP/websocket reverse proxy server.
There will be an admin channel that registers graphs (not zips; redis is assumed) under a name
The public instantiation channel will take a graph name and create a graph instance.
A graph instance is nothing more than a dict of checksums that override the graph.
Upon instantiation, a Docker container is fired up, the Seamless REST and websocket ports are bound to
 ephemeral ports, and a reverse proxy is set up. After some idle time, the Docker instance will expire;
 future requests to the proxy channels will re-instantate it.
 On the Seamless side, this requires a context graph snoop. This should probably be read from an env var.
 Secondary contexts such as the graph visualization context should have snooping disabled.
The seamless graph server will store both the template graph (and their names) and the override dict (and
the graph ID) in Redis.
- Future tools related to provenance (see the cloudless document)
