Status/exception/logging
========================

UPDATE:

Transformers will have status, exception and stderr. 
For now, stderr is not yet implemented, while status and exception are computed properties, that can be interrogated using polling observers.
In the future, they (and cell.status/cell.exception, and get_graph?) will be "second-rate cells", in the sense that they can be connected only to (normal) cells in *other* contexts.

On the longer term, do the same for progress, and for execution time
 as well.

This will replace the Logging and Report cells mentioned in earlier plans.
/UPDATE

TODO (long term)

Finalize exception logging. There are still the core aux systems
(mount, share, communion), link them to cells if possible. For the rest,
 there are still translation/highlevel API exceptions, but they should be printed.
 Did we forget anything?

Exceptions and state should never be real cells, as they are not deterministic.
But in the future, perhaps support connecting them to a cell from a *different* graph...

Older plan
==========

D. Logging and graph visualization, initial prototype
(see Status-of-seamless.txt)
NOTES:
- status mostly gets reconstituted (except reason for void)
- metainfo:
    - store exception and stdout/stderr of a transformation, include in status report
        also store if result was obtained from cache, or remotely
    - same for macro and reactor (easier, because 1:1)
    - same for cell:
        - structuredcell validation error
        - error in obtaining value from checksum (also if provenance fails)
    - implement storage for metainfo in graph
- logging system, based on event loop (in parallel to metainfo)
- progress bar system (connect to progress)

