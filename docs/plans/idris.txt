Idris evaluation
================
Very long-term. From a grand computation description D, one can generate Idris
 parsers in the same way as Idris type-safe printf.
One such parser converts D => Idris input type, Idris output type
Another converts Idris input data + D => Seamless input JSON J1
A Seamless launcher is a function that converts J1 to Seamless output JSON J2
  by launching remote (non-interactive) Seamless server
Another parser converts J2 + D to Idris output data.
This allows (non-interactive) Seamless services to be linked in a type-safe manner, amenable to proofs,
  and using the entire toolkit of functional programming (map, reduce, etc.)
Lazy output cq. lazy input cells in Seamless services can be exposed as callbacks-into-Python
 (CFFI supports this) cq. callbacks-into-Idris-functions
 (Haskell FFI at least supports this; Idris FFI does not support closures, that's bad).

