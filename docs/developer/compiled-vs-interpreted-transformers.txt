NOTE (Jan 2020): This document was written some time ago. 
Overall it looks OK, but some of the details may be wrong/outdated.

In principle, seamless allows a worker to be written in any language. (1)
Seamless will restrict the allowed values of a worker's "language" to a
list of recognized languages (mime types), but this list should be very long.
For every recognized language, seamless will classify them as:
- By default, "compiled" or "interpreted" (2)
- A default compiler (this can be defined even for interpreted languages, e.g. Nuitka or embedded-CFFI for Python)
Languages can then be subdivided as follows:

0) The Python and IPython languages are native to pyseamless.
Workers and modules can always be written in those languages.
1) For a worker written in an interpreted language, that language MUST be marshalled.
This would normally involve some kind of bidirectional JSON bridge. Some IPython magics implement marshalling as well.
Memory is never shared, always copied.
The interpreter is responsible for its own memory management.
2) For a worker written in a compiled language, that language MAY be marshalled.
This essentially means: filling up a data structure (generated from the input and result schemas)
that can be passed on to the compiled language.
In addition, a header must be generated of the worker function.
(transform, code_start, code_update or code_stop) in the compiled language.
There may be different marshallers for the same language, e.g. a Fortran header may use the underscore name (gcc)
 or a full ISO C binding.
If no marshaller can be found, a C header is generated instead; the user is then informed that the worker function
 signature must match this C signature. Marshalling is then done using the default CFFI marshaller, which uses the
 C header.
 Cell memory management is always done by Seamless. The compiled function may allocate things internally, but these allocations
  may never become part of Seamless cells. The compiled function must have released all resources after transform()/code_stop()
  have finished.
3) Compiled languages in an extension module MUST be interfaced if their objects are PUBLIC.
*Interfacing* means: to allow the symbols of the public objects to be imported in the language of the worker.
Different interfacers can analyze the public objects of extension modules and tell if they are compatible
The following global interfacers (to Python) are defined:
- CFFI. Requires C headers for every public source object. Accepts C and C++ as public source objects.
  Requires fixed binary form for all arguments.
  Pure-plain JSON objects/arrays can become string, but mixed-plain for any argument is not allowed
- Numpy distutils. Accepts C, C++ and Fortran (using f2py) as public source objects. (see WIP)
- Cython distutils. Accepts C, C++ and Cython as public source objects.
- Manual interfacer (also for non-Python. Requires headers for workers written in compiled languages).
  Compiles public source object with -fPIC. The module becomes a shared library.
  Python must use ctypes to load it, or ABI-mode CFFI (manual header).
Private objects in an extension module are simply compiled to binary code objects and linked into the module binary.

Modules are always either compiled, or interpreted. If it is a mixture, there are
 four options:
 a  split the module in two modules. The interpreted module may import the compiled one.
 b  annotate the compiled source objects as "data". The interpreted source objects may
    then compile them on the fly (JIT)
 c  designate for each compiled source object (or group of source objects) one of
     the interpreted source objects as its "compiler". The module as a whole will
     be interpreted, with the "compiler" parts removed, but the compiled objects included.
     Example: CFFI build script.
d   have the compiled module marshalled to the interpreted language. Example. Cython-to-IPython using IPython magic.

Interpreted modules must have all objects of the same language, unless a transpiler is available.
IPython-to-Python transpilation is implicit.

A worker can be explicitly interpreted or compiled. The default is determined from the worker's language.
Workers may have one or two module pins, containing JSON of the module definition.
A compiled-language worker has a special optional module pin "main_module", containing *one* module definition,
 the main module dict.
It also has the option "marshaller" (default: the language-specific marshaller)
 and it has the option "interfacer" (default: auto-detect).
 If the worker is interpreted-language, an interfacer must be found.

All workers also have a special optional module pin "modules", which contains a *dict* of module definitions
The code pins are implicitly part of the main module. However, explicit "objects" entries for the code pins are possible.
"\_" is an alias for "code".
A module is a dict with at least an item "objects".
An "objects" entry for a source object may contain:
- The language (but not for a code pin), required. Seamless must know the language (in particular, its file extension)
- The source (but not for a code pin), required
- "compiled" or "interpreted" or "data" or "internal_compiled" (option c above, must contain name of other object)
- One or more private headers (in one or more languages) for sharing symbols with other objects.
  Format: (filename, value) dict. Filename includes file extension. Seamless will check that the filename won't clash
  with other headers or object-source-files-written-on-disk.
  No need to specify language. May be referenced (included) by own code (in own language)
   or by other object in the module (in that object's language), Seamless won't care.   
- Public or private (but not for a code pin), default: public (implies "compiled")
- Public C headers, as a language:header-code dict.
  Only for extension modules for interpreted workers.
  Needed if CFFI interfacer is used.
- Dependencies. Just for incremental (re-)compilation
  "../blah/X" will always refer to X in extension module blah (also inside the code, e.g. #include)
- List of exported symbols (if compiled, implies "public"). Necessary for IPython or .ipynb
- The compiler (optional, implies "compiled")
- "target": compilation mode (release, debug, profile; default is "profile")
- Compilation options: a list, a string or a per-compiler dict thereof
  (optional; if not defined, use default options based on target)
- The transpiler and transpiler options (optional)
- "marshaller": two scenarios where this is specified:
  1 In the code pin of the main module: a customized marshaller.
    For Fortran, seamless known the gcc marshaller (apply underscore), and the iso bind marshaller.
    They generate different signatures, and have different schema support.
  2 In an extension module, this is option d above. e.g. specification of an IPython magic

The module also contains:
- mode: "interpreted" or "compiled"
- language (only if interpreted)
The module may also contain:
- A compiler config dict, where locations of each compiler can be entered (else Unix "which" is used)
- A transpiler config dict, that also lists the target language
- interfacer
- Linking options
- Global settings: verbose compilation, debug compilation, build directory

In summary:
For pyseamless, interpreted workers in Python need no marshalling (3).
All other interpreted workers must be marshalled to and from Python (4).
Compiled workers may have their own marshaller, but that is mostly about generating
 from the schema the "signature" (telling the user the mandatory worker function declaration).
 Internally, the C header generated from the schema is used by CFFI, and this is the fallback.
For interpreted workers, extension modules may be defined.
Extension modules with all objects written in Python will be usable directly (3).
TODO: in .core, support for modules-defined-as-dicts-of-Python-cells, not just single Python/IPython cells
TODO: in .core, support for .ipynb cells (check language_info!)                

Compiled workers have a main module, of which the code pin source objects are implicit members.
 You may add additional extension modules, but this is tricky.

The whole point of a compiled module is to generate a shared module (for marshalling or interfacing).
In the future, this could be generalized:
- submodules, which generate statically-linked libraries (different bag of linked .o, plus public header )
- binary as end point, to be used with slash-language transformers (= interfacing via file system shell)
- implement caching + incremental compiling ("make" replacement).
  Already, internally, modules should be compiled to low-level BinaryModule, consisting of .o bag.
  This will be passed on to transformer for marshalling (CFFI) or interfacing (link into .so with distutils).
  In both case, use extra_objects (in set_source for CFFI, Extension class constructor params for distutils)
  The translation of module-JSON-to-.o-bag should become a low-level macro with a cell for each file
   (probably implemented using slash).

You can choose between marshalling and interfacing.
In general, marshalling is better, as you can share all Seamless schema's, and you have
 type safety. Interfacing only works for interpreted workers, it may require type declarations.

(1) But for the time being, macros will be written in Python, using the pyseamless.core API.
Therefore, "workers" will refer to reactors and transformers
(2) Or "kernel". Kernel languages have the restriction of both interpreted and compiled languages.
 They need a compiler, but they cannot be part of a polyglot module.
 The only pure "kernel" language would be OpenCL (marshalled using PyOpenCL).
 CUDA by default is in "kernel" mode (using PyCUDA marshalling), but it could also be
 in "compiled" mode (using nvcc, and then marshalled using CFFI as usual).
 OpenGL/GLSL is a bit of a special case. It definitely requires marshalling,
 but not in the context of polyglot transformers/reactors.
 Rather use the 0.1 library for marshalling (rip Spyder, parse Silk schemas).
(3) Including IPython, and including .ipynb (TODO)
(4) but if you can find a worker service that will accept the interpreted worker,
 it will do the job for you, problem solved.
