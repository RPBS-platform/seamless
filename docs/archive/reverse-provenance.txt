Reverse provenance
====================

(aka "re-compute on the fly")

Imagine the case where a graph has just been loaded. You know all checksums, but not the values.
For now, all values must be stored in an accompanying cache archive.
In the future, make it possible to store just the authoritative values.
When a non-authoritative cell value is requested, and there is a cache miss, 
 travel back the graph and evaluate the transformers to re-compute the result.
This should be enabled/disabled on a by-cell basis (if any cell upstream has it
 disabled, don't do it).

UPDATE: this has been implemented as "fingertipping" (imperative per-cell API)

UPDATE 2: There is now two kinds of fingertipping: remote downloading and reverse provenance (recompute).
Both are now enabled by default, but can be disabled on a per-cell basis.
This is only at the low level, need to be implemented at the high level.
In addition, make a high-level property "scratch".
This is not at all translated to the low-level, but it will prevent a checksum to be included in save_zip;
 a database cleanup script may remove buffers from Redis if they are only held by scratch cells.
TODO: in a future version of Seamless, disallow scratch for authoritative cells.