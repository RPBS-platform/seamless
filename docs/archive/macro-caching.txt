Low-level macro caching
=======================
When a low-level macro is re-evaluated, it would be a terrible waste of computation to just build and re-execute everything.
Therefore, low-level macro caching will re-use the existing macro result as much as possible.
This builds upon a similar mechanism in seamless 0.1.
- The first thing to do is to put all managers in a halting state. This freezes all worker updates, so copying (substitution) is safe. Sub-macros still get executed.
- For the existing context, a graph is built. The graph of a context consists of a *dependency dict* of input/edit pins,
  the graphs of its children, and the connections. The graph of a worker or macro consists of just the dependency dict (and a type string).
  A dependency of an authoritative cell is the md5sum of its value.
  A dependency of a non-authoritative cell is the dependency graph of the worker that generated it.
  Cells may have only one input, this is strictly enforced.
  UPDATE: just of the direct children may be enough.... until you reach authoritative cells
- Then, the macro is (re-)executed as normal, but again, with all managers in a halting state. For the generated context, a graph is built. Each cell and worker
  in the generated context is checked against the current context, and substituted if possible. (clean = substitution, dirty = no substitution).
  substitution rules are as follows:
  - Workers and cells with different dependency dicts (compared to the cache) are dirty
  - Authoritative cells with the same md5sum are clean
  - Workers and cells where all dependencies are clean, are clean
  - Workers and cells that are part of any kind of cycle are dirty (UPDATE: there can't be cycles now)
  - Cache cells and evaluation cells may be dirty, yet the workers that depend on them are clean (except workers not in equilibrium, see below, and whatever depends on them)
  - Otherwise, workers and cells with any dirty dependency, are dirty
- A special rule applies to workers that are not in equilibrium.
    (This includes workers that depend on non-empty event streams)
    They must be "hyper-clean": evaluation cells and ephemeral cells are now also taken into account
    If they are hyper-clean, their kernel is substituted with the kernel from the current context (which is performing the computation)
    Else, they are dirty.
- Reactors that are clean receive a special mark, because whenever they receive an update, the "start" code must be executed, not the "update" code. UPDATE: this is not true, it will be the "update" code.
- Dirty workers are marked with their last previous output and the hashes of their last previous inputs. This gives still a chance for a caching hit if the hashes match.
  These marks persist for the next low-level caching
  Otherwise, the marks are deleted whenever all inputs have been defined.

NOTE: Caching takes place at the time that the outermost macro has been completed.
To make this work, it is imperative that at that time, all sub-macros have been completed, as well.
This is fixed by the fact that macros execute synchronously,
 as soon as their inputs are present.
There are two cases that cannot be fixed in this manner:
- Macros with an exported inputpin whose input goes above the outermost macro that is being re-run.
  Future solution: right before cache evaluarion, look at all macro inputpins, and (pre-)set their value if their input is external.
- Macros that depend on worker output.
  Future solution: allow the worker to be marked, and do a
  special equilibrate() using these workers right before cache evaluation.

