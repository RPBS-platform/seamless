#!/bin/bash
set -u -e -x

# Opens a bash shell into a running Docker container. 

# The container can be hidden behind up to two SSH servers:
# If "server1" is not defined, the Docker container is on localhost
# If "server1" is defined but not "server2", then the Docker container is on server1.
# else, on server2 (visible from server1, but not from the outside).

# If "server1" is defined, it must be an host or SSH hostname
#   (an entry in /etc/.ssh/config) on localhost
# If "server2" is defined, it must be the host or IP address of server2 ***as seen by server1***
#   SSH hostnames or hostnames/IP addresses ***as seen from localhost*** WILL NOT WORK
# If "server2user" is defined, it is the username to connect to server2. If not defined,
#  the current user ***on localhost*** is used. 

# This works even if only server2 port 22 is open to server1

container=$1
server1=${2:-""}
server2=${3:-""}
server2user=${4:-""}

cleanup() {
    if [ -z "$port" ]
    then
        existing=$(ps -elf | grep $port | grep ssh | awk '{print $4}')
        [[ ! -z "$existing" ]] && kill -1 $existing
    fi
}

trap cleanup ERR

if [ -z "$server1" ]
then
    docker exec -it $container bash
else
    if [ -z "$server2" ]        
    then
        ssh -t $server1 'docker exec -it '$container' bash'
    else
        port=$(shuf -n 1 -i 49152-65535)
        existing=$(ps -elf | grep $port | grep ssh | awk '{print $4}')
        [[ ! -z "$existing" ]] && kill -1 $existing
        ssh -f -L localhost:$port:$server2:22 -N $server1
        if [ -z "$server2user" ]
        then
            server2user=$(whoami)
        fi
        ssh -oStrictHostKeyChecking=no \
          $server2user@localhost -p $port -t \
          'docker exec -it '$container' bash'
        existing=$(ps -elf | grep $port | grep ssh | awk '{print $4}')
        [[ ! -z "$existing" ]] && kill -1 $existing
    fi
fi

