<?xml version="1.0" encoding="UTF-8"?>
  <typename>AxisSystem</typename>
  <docstring>
    Implementation of a coordinate system
     consisting of an origin and x,y and z axes
  </docstring>
  <attribute>
    <name>origin</name>
    <type>Coordinate</type>
  </attribute>
  <attribute>
    <name>x</name>
    <type>Coordinate</type>
  </attribute>
  <attribute>
    <name>y</name>
    <type>Coordinate</type>
  </attribute>
  <attribute>
    <name>z</name>
    <type>Coordinate</type>
  </attribute>
  <formblock>
    <content>
      x.default = 0
      y.default = 0
      z.default = 0
      x.digits = 3
      y.digits = 3
      z.digits = 3
    </content>
  </formblock>
  <methodblock>
    <content>
      def __mul__(self,a):
        """Multiplication with either:
         a Float (scaling)
         a Coordinate (vector-matrix multiplication)
         or an AxisSystem (matrix-matrix multiplication)
        """
        types = (Float, Coordinate, AxisSystem)
        for t in types:
          try:
            a = t(a)
          except:
            continue
          break
        else:
          raise TypeError("Unknown type")
        if t == Float:
          ret = AxisSystem(self.origin, self.x*a, self.y*a, self.z*a)
          return ret
        if t == Coordinate:
          return t * self
        if t == AxisSystem:
          ret = AxisSystem()
          b = self
          ret.x = a.x * b.x.x + a.y * b.x.y + a.z * b.x.z
          ret.y = a.x * b.y.x + a.y * b.y.y + a.z * b.y.z
          ret.z = a.x * b.z.x + a.y * b.z.y + a.z * b.z.z
          ret.origin = a.x * b.origin.x + a.y * b.origin.y + a.z * b.origin.z + a.origin
          return ret
    </content>
  </methodblock>
</xml>
