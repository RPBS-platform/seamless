*** executor ***
Traceback (most recent call last):
  File "/seamless/seamless/core/manager/tasks/evaluate_expression.py", line 125, in _run
    await validate_subcelltype(
  File "/seamless/seamless/core/protocol/validate_subcelltype.py", line 34, in validate_subcelltype
    build_module(v, module_error_name=None)
  File "/seamless/seamless/core/build_module.py", line 250, in build_module
    mod = build_compiled_module(
  File "/seamless/seamless/core/build_module.py", line 188, in build_compiled_module
    raise BuildModuleError(stderr)
seamless.core.build_module.BuildModuleError: 
g++ -c main.cpp -O3 -ffast-math -march=native -fPIC -p -g -o main.o
******************** ERROR ********************
main.cpp:1:1: error: ‘lambda’ does not name a type
    1 | lambda a,b: a + b
      | ^~~~~~

******************** /ERROR ********************

*** /executor ***

********************************************************************************

/*
The following C header has been auto-generated from the transformer schema
It will be used to generate bindings, but it will not be automatically
added to the compiled transformer code.

If your transformer code is written in C/C++, you may do so yourself.
For C, you may need to include "stdint.h" and "stdbool.h".
If your transform() function is written in C++, don't forget to add 'extern "C" '
*/

int transform(int a, int b, double *result);
********************************************************************************

g++ -c main.cpp -O3 -ffast-math -march=native -fPIC -p -g -o main.o



g++ -c main.cpp -O3 -ffast-math -march=native -fPIC -p -g -o main.o


5.0
Status: OK
None
25
