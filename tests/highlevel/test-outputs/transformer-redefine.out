*** executor ***
{'module': 'Traceback (most recent call last):\n'
           '  File "/seamless/seamless/core/manager/tasks/evaluate_expression.py", line 129, in '
           '_run\n'
           '    codename="expression"\n'
           '  File "/seamless/seamless/core/protocol/validate_subcelltype.py", line 33, in '
           'validate_subcelltype\n'
           '    await build_module_async(v)\n'
           '  File "/seamless/seamless/core/build_module.py", line 155, in build_module_async\n'
           '    full_module_name, mod = build_module(module_definition)\n'
           '  File "/seamless/seamless/core/build_module.py", line 138, in build_module\n'
           '    full_module_name, completed_checksum, completed_module_definition\n'
           '  File "/seamless/seamless/core/build_module.py", line 98, in build_compiled_module\n'
           '    raise BuildModuleError(stderr)\n'
           'seamless.core.build_module.BuildModuleError: \n'
           'g++ -c main.cpp -O3 -ffast-math -march=native -fPIC -p -g -o main.o\n'
           '******************** ERROR ********************\n'
           'main.cpp:1:1: error: ‘lambda’ does not name a type\n'
           ' lambda a,b: a + b\n'
           ' ^~~~~~\n'
           '\n'
           '******************** /ERROR ********************\n'
           '\n'}*** /executor ***

********************************************************************************

/*
The following C header has been auto-generated from the transformer schema
It will be used to generate bindings, but it will not be automatically
added to the compiled transformer code.

If your transformer code is written in C/C++, you may do so yourself.
For C, you may need to include "stdint.h" and "stdbool.h".
If your transform() function is written in C++, don't forget to add 'extern "C" '
*/

int transform(int a, int b, double *result);
********************************************************************************

g++ -c main.cpp -O3 -ffast-math -march=native -fPIC -p -g -o main.o


5.0
Status: OK
None
25
