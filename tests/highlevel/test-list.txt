# NOTE: See https://github.com/sjdv1982/seamless/issues/65 . Regressions expected!!!

# In general, run with:
#   python3 -u TEST.py > test-outputs/TEST.out 2>&1
#   Best also to test using "ipython3 TEST.py", since re-translation may work differently
#   Before each release, the test set must be run under seamless-devel AND under the Conda environment!
bytes-conversion.py
mime.py
test-html.py
auth-checksum.py
independence-error-message.py
schema.py
subcell.py
subsubcell.py
inchannel-conflict.py
logs.py
deepcell-simple.py
filesystemlike.py
context.py
context2.py
scratch.py
transformer-bracket.py
simpler-tf-print.py
function_like_error.py
simplest.py
simple-missing.py
simpler-listpin.py
simpler-result.py
tf-byte-dict.py
simpler.py
simpler-deepcell.py
simpler-ipython.py: Run with ipython --no-term-title (not -i) (see issue 25). Output is approximate, depends on exact timings.
macro-simple.py
macro.py
macro-elision.py
reactor-edit-macro.py
delay.py
module-simplified.py
module.py
bash.py
docker_.py
docker2.py
docker_gpu.py: run only on a machine with nvidia-docker2 installed
expression-exceptions.py
highlink-schema.py
highlink-schema-tf.py
traitlet.py
traitlet2.py: The exact output is dependent on random memory locations
simple.py
simple-deepcell.py
simple-pi.py: Also creates twopi.seamless, twopi-result.seamless, twopi-result.zip
simple-pi-deepcell.py: Also creates twopi-deepcell.seamless, twopi-deepcell-result.seamless, twopi-deepcell-result.zip
simple-pi-remote.py: run with jobslave-nodatabase
simple-pi-remote-database.py: run with jobslave; makes no assumptions about the database contents
subcontext.py
joincache.py
reassign-transformer.py
cascade.py
environment0.py
mount-write.py
transformer-compiled.py
transformer-redefine.py
transformer-compiled-error.py
transformer-compiled-module.py
twopi-graph-database.sh: run with Seamless database; delete job results (e.g. redis-cli flushall && rm -f ~/.seamless/database/*-*)
                      run as i=twopi-graph-database; seamless-devel ./$i.sh > test-outputs/$i.out 2>&1
twopi-graph-jobmaster.sh: same as above; run as i=twopi-graph-jobmaster
twopi-graph-service.sh: same as above; run as i=twopi-graph-service
load-graph.py
load-graph-static.py
vault.bash: run as i=vault; seamless-devel ./$i.bash > test-outputs/$i.out 2>&1
library.py
library-context-argument.py
library2.py
library-context-argument.py
library-in-library.py
library-schema.py
channel.py
environment3.py
meta.py
high-in-low.py
high-in-low2.py
high-in-low3.py
high-in-low4.py
high-in-low5.py
high-in-low6.py
high-in-low7.py
high-in-low8.py
high-in-low4-memory.py    # Quite long test.
                          # Creates 5.6 GB of buffer cache in /tmp/dummy-db
                          # Run with rm -rf /tmp/dummy-db  && mkdir -p /tmp/dummy-db && seamless-devel-database dummydb-config.yaml
                          # Time is ~120 seconds, or ~60 seconds when re-executed (TODO: re-time)
                          # Re-executing the test is faster, because the transformation results and input buffers are cached
                          # Exact output will depend on timings
                          # After the test, "rm -rf /tmp/dummy-db && docker stop seamless-database-container"
high-in-low6-memory.py    # See above. Time is ~90 seconds, or ~40 seconds when re-executed (TODO: re-time)
switch-join-stdlib.py

Non-automatic tests
=========================
share-binary-and-unicode.py
    Run with ipython
    Open http://localhost:5813/ctx/cow.jpg and http://localhost:5813/ctx/unicode.txt in a browser
    In a terminal, run seamless-http-put http://localhost:5813/ctx/cow.jpg --upload-file cow-rotate.jpg --binary
    The cow should be upside down
    In a terminal, run seamless-http-put http://localhost:5813/ctx/unicode.txt --upload-file unicode.txt
    The unicode text should refresh
docker-kill.py    The output is not important. Important is that "docker ps -a" reveals no remaining orphaned "ubuntu" Docker containers.
bash-kill.py      The output is not important. Important is that the script finishes in 3.5-4 sec, and that 'ps -ef' reveals no remaining orphaned "sleep" processes
add.py:           Run with ipython -i, then change mounts /tmp/a /tmp/b /tmp/c /tmp/code.py
simpler-share.py: Run with ipython -i, then do "curl localhost:5813/ctx/myresult".
                  IPython values printed should be 36 then 39 (Silk); curl should return 39
                  change ctx.a to get 3*a as the result
highlink-cpp.py:  Run with ipython -i, then continue in interactive mode,
                  changing the source code and the schema until it works.
mount.py:         Run with ipython -i, then continue in interactive mode.
                  Initial output is in test-outputs/mount.out
cython_.py        Run with ipython -i                 
python-debugging.py: Run with ipython -i, then continue in interactive mode.
observe-graph.ipynb: Run "seamless-devel-jupyter" and then open /cwd in the browser
traitlets.ipynb: same as above
share-pdb.py: open with seamless-devel-ipython -i, Open in http://localhost:5813/ctx/index.html
share-pdb-docker.seamless/.zip: to test using:
      seamless-devel-serve-graph share-pdb-docker.seamless share-pdb-docker.zip
    Open in http://localhost:5813/ctx/index.html
    Potentially, add:
      --status-graph /seamless/seamless/graphs/status-visualization.seamless \
      --add-zip /seamless/seamless/graphs/status-visualization.zip
    In that case, open also http://localhost:5813/status/index.html
plotting.py
environment.py
   Can be run automatically in a standard container,
    and will exit at some point because Rust is not installed
    (see test-outputs/environment2.out)
  Otherwise, install Rust in the container and then run the test.
  This will print 29, 34, 34 at the end
environment2.py
   Can be run automatically in a standard container,
    and will exit at some point because Go is not installed
    (see test-outputs/environment2.out)
  Otherwise, install Go in the container and then run the test.
  This will print 2029, 2096 at the end, and then wait for a debugger
environment4.py
  This will fail. 
  Install net-tools with apt and 'sympy==1.7.*' with conda to make it succeed.
environment5.py
  Loads and runs the graph for environment3 and then environment4.
  Should succeed for the former (result: 11.40)
   and fail for the latter.
  Install net-tools with apt and 'sympy==1.7.*' with conda to make it succeed.
environment6.py
  Adding dynamic support for PHP. This will fail. 
  Install php7.4-cli with apt and python-bond with pip to make it succeed.
r.py
  run with ipython
  Third line should be <Silk: 314.3% >
  There should be two plots, in:
   http://localhost:5813/ctx/result.svg
   and
   http://localhost:5813/ctx/result.png
  edit plot.R
  The PNG should update, the SVG should not
  compute-ctrl-c.py: open with ipython and press ctrl+c
