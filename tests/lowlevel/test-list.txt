# NOTE: See https://github.com/sjdv1982/seamless/issues/65 . Regressions expected!!!

# In general, run with:
#   python3 -u TEST.py > test-outputs/TEST.out 2>&1
# Before each release, the test set must be run under seamless-devel AND under the Conda environment!
bytecell.py
bytecell2.py
bytecell3.py
cachehit-semantic.py
conversions.py: the output is approximate, depends on exact timings
simple.py
simple-async.py
simple-indirect.py
simple-ipython.py
exception_upon_compute.py
subcontext.py
simple-reactor.py
downstream-reactor.py
reactor-edit.py
simple-cache.py: see instructions in file
plain.py
mixedcell.py
preliminary.py: the output is approximate, depends on exact timings
cached.py
structured_cell/simple-auth.py
structured_cell/simple-macro-mode.py
structured_cell/simple-channels.py
structured_cell/iadd.py
dummy-remote-buffercache.py
dummy-remote-result1.py
dummy-remote-result2.py
dummy-remote-result3.py
dummy-remote-result4.py
simplest-macro.py
simple-macro.py
compile.py
compile-fortran.py
compile-mixedlang.py
schema.py
fingertip.py
injection.py
dependent-modules.py
module-package.py
module-package-complex.py
module-package-absolute.py
injection2.py
injection3.py
injection4.py: the output is approximate, depends on exact timings, see also [1]
injection5.py: see above
simple-share.py
transformation-checksum.sh: run with Seamless database
transformation-raw.py
transformation-raw-ipython.py
simple-duplex.py
simple-duplex-remote.py: run together with:
     python3 -u ../../scripts/jobslave-nodatabase.py --time 40 --direct-print > test-outputs/simple-duplex-remote-jobslave.out 2>&1
simple-remote.py: run together with scripts/jobslave-nodatabase.py
simple-remote2.py: run together with:
     python3 -u ../../scripts/jobslave-nodatabase.py --time 30 --direct-print > test-outputs/simple-remote2-jobslave.out 2>&1
compile-run-remote.py: run together with scripts/jobslave-nodatabase.py --direct-print .
     The jobslave output should include "ADD 8.141592979431152"
macro.py
macro2.py
macro3.py
pin-as.py
checksum-cell.py
structured_cell/simple-deepcell.py
structured_cell/channels-deepcell.py
structured_cell/schema.py
structured_cell/schema-deepcell.py
structured_cell/channels-morph.py
collatz.py: the output is approximate, depends on exact timings
structured_cell/preliminary.py: the output is approximate, depends on exact timings

Non-automatic tests
=========================
mount.py:
     - remove /tmp/mount-test
     - run with ipython3 -i
     - then open all files in /tmp/mount-test and manipulate/monitor them
mount-direct.py: see above
mount-cson.py:
     - remove /tmp/test.cson and /tmp/test.json
     - run with ipython3 -i
     - then open /tmp/test.cson and /tmp/test.json, manipulate resp. monitor them
mount-plain.py: see above, minus the .cson
mount-as-directory.py: see above, minus the .cson

simple-communion: run "python3 -u simple-communion-slave.py > test-outputs/simple-communion-slave.out 2>&1"
     then "python3 -u simple-communion-master.py > test-outputs/simple-communion-master.out 2>&1" in a different terminal,
     then Ctrl-C simple-communion-slave.py
     The output is available in simple-communion-[master/slave].out
simple-debug.py
mount.ipynb
communion-peer[12].sh: run communion-peer1.sh > test-outputs/communion-peer1.out 2>&1,
     then run "./communion-peer2.sh > test-outputs/communion-peer2.out 2>&1" in a different terminal,
     then Ctrl-C communion-peer1.sh
     The output is available in communion-peer[12].out
compile-debug.py
     - Run with ipython3 -i . Run gdb from a second shell into the container
     To make this work, you will need to do one of the following:
     - run the gdb shell as privileged root, i.e. as "docker exec -u root -it --privileged container_name bash"
     OR
     - disable kernel hardening in your host (/proc/sys/kernel/yama/ptrace_scope, set the value to 0)

transformation-raw-conda.py
     First run this, and it should give an error
     then install Tensorflow with "pip install tensorflow", and then it should work 


NOTES
=====
[1] This test is about Cython and can also run non-automatically.
- Run with ipython3 -i
- Open cell-ipython.html in the browser and cell-ipython*.ipy in a text editor
- Interpolate cell-ipython.ipy between ORIGINAL and OPTIMIZED,
  and observe the HTML and timings.
