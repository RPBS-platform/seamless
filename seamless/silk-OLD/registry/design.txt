from silk import register, unregister
seamless.registry.create(
  "silk",             # (1)
  silk.register,        # (2)
  silk.unregister,      # (3)
  silk.redefine,      # (4)
  {
    "python": silk.inject
  },                  # (5)
  None                # (6)
)

(1)
registry_name. Can be any valid Python identifier except "create"

(2)
Register function:
definitions = register(content, data_type, identifier=None)

"identifier" will be created (and stored) by the seamless.registry machinery
if silk.register is used without registry, identifier can be None
"definitions" is what has been created (or modified) by the register() act:
  in case of silk, a list of silk types
  in case of atc, a list of affected types and methods:
     converter(A,B) influences A and B
     method(A, "show") influences A and "show"

(3)
unregister(identifier)

(4)
redefine(identifier, content)

(5)
A dictionary of namespace injectors
inject(namespace, definitions)

Connected processes can ask definitions to be injected into their namespace
Python namespace = globals()
C namespace = header code
For Silk, works like import
Not used for ATC (just imports a single global atc object)
For lightweight, insert an object that knows all entities in "definitions"

(6)
dependency mapper
Maps dependencies as declared by the process to definitions
Only used for ATC
For example, ("path", "A", "B") is mapped to ("A", "B") is A and B are convertible directly,
 to ("A", "B", "C", "D") if the conversion can go via C and/or D

================

Results in a registry "seamless.registries.silk"
A registry is a pseudo-cell (it is stored as such in the context.
Therefore, setting up the registry is one of the few things that needs to be done before a context file can be loaded)

- Cells can connect to a registry:
  cell(data_type=("schema", "silk"), content = ...).connect(seamless.registries.silk)
This will result in a call to the register function
Updating the contents of the cell will result in a call to the redefine function
Breaking the connection will result in a call to the unregister function

- The registry can be connected to processes
The process must have a method "interact_registry" (define an ABC for this)
def interact_registry(registry_name): # "silk", "atc", etc
  ....
Whenever any code block changes, "interact_registry"  is called
It returns a tuple of two: (dependencies, namespace_type, namespace)

dependencies is a list of dependencies
The process has to analyze its own dependencies, based on the contents of the code block(s),
 and the "analyze_dependencies" code block
Silk example: dependencies = ("AxisSystem", "IntegerArray")
ATC example: (("path", "A", "B"), ("method", "show") )
Lightweight: just the entities
dependencies are mapped to definitions via the registry.mapper function, if defined
 if not, definitions = dependencies

namespace_type: "python", "c" or just None
namespace: the process's namespace object

The registry can trigger an execution of the process when its dependencies change.
Whenever a cell changes (connection/disconnection/update), all of its dependencies (former and current) are marked as dirty,
 and associated processes are re-executed

In addition, whenever the process is executed (for any reason), the registry may perform an inject:
registry.inject[namespace_type](namespace, definitions)
(if namespace_type is not None)
This happens just prior to execution

Note that this model assumes that the registry can get a direct reference to process.interact_registry and to the namespace object it returns.
If the process lives in a different Python process, some bridge has to be set up.
In any case, the namespace object has to be smart, because things happens async: its globals() may be in use (process is running!)
 at the moment the registry updates it
