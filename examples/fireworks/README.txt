fireworks.py

Example demonstrating simulation of OpenGL-rendered fireworks.

Adapted from the Vispy gallery.
Original file: fireworks-ORIGINAL.py (does not use seamless; requires vispy)

This seamless example will be demonstrated in a video tutorial
on https://www.youtube.com/playlist?list=PL6WSTyQSLz08_GQqj-NyshaWnoIZMsqTK
This video tutorial is planned for October 2017.

How to run/edit the example
===========================

Run fireworks.py using IPython or the seamless command line tool.
Live-edit the following cells and files:

Cells
*****

In IPython, type e.g. "ctx.gravity.set(10)" to set the value directly,
or type "edit(ctx.gravity, 'Gravity')" to open a GUI. The following cells can
be edited:

- ctx.N: Number of fireworks points to generate per explosion.

- ctx.period: Time period between explosions.

- ctx.tex_filename: Texture image filename (.png, .jpg, etc.).
Can be "", in which case random noise is generated instead.

- ctx.tex_radius:  Texture radius (larger makes the texture more precise)

- ctx.gravity: gravity, defines how fast the points fall.

- ctx.pointsize: defines the radius of the points

- ctx.shrink_with_age (bool). Whether or not the points shrink over time.

Files
*****

Edit any of these files in a text editor while the program is running.
As soon as you save the file, you will see the effects.

- vert_shader.glsl. Vertex shader code.

- frag_shader.glsl. Fragment shader code.

- vertexdata.silk. Silk data model.
As of seamless 0.1, Silk is still undocumented. The idea is: a Silk data model
(syntax looks like a C struct) becomes a Silk Python class.
Every Silk Python object is a wrapper around internal data, which is either in
JSON or in Numpy format (or a hierarchical hybrid of the two).
In this example, a VertexData object is stored in Numpy format in
ctx.vertexdata, which is stored also on the GPU. The vertexdata is provided to
the glprogram, which feeds it to the shaders.

- cell-gen-vertexdata.py. Transformer source code for vertex data generation.
Every vertex becomes a single point in the explosion.

- params_gen_vertexdata.json. Seamless transformer parameters for vertex data
generation.

- cell-gen-texture.py. Transformer source code for texture generation.
This defines how every explosion point is textured.

- params_gen_texture.json. Seamless transformer parameters for texture
generation.

- cell-gen-uniforms-start.py, cell-gen-uniforms-update.py:
Reactor source code for OpenGL uniform generation. The uniforms define
parameters that are the same for each point, e.g. their age, how they fall over
time, their size, etc.

- params_gen_uniforms.json. Seamless reactor parameters for OpenGL uniform
generation.

- program_template.cson. glprogram template.
Generates an OpenGL program to render the explosion.
See the "glprogram" documentation in the seamless standard library for more
details on what each parameter means.
The template contains all glprogram parameters except the vertex attributes
(which are filled in by the gen_program transformer).

Pre-made contexts
=================

Run them with the seamless command line tool, or inside IPython type:
"ctx = seamless.fromfile('fireworks.seamless')"

NOTE: all contexts have been saved without file dominance, which means that loading the context will modify
all the files above!

fireworks.seamless: the context generated by fireworks.py
confetti.seamless: confetti-style fireworks
  - changes color from a uniform to a vertex attribute
  - no longer makes points fade with age
orcabubbles.seamless
- changes color from a uniform to a vertex attribute
- no longer makes points fade with age
- displays an orca image inside each point
- reduced gravity, increased point size, points no longer shrink with age

demo/ directory
===============

This constructs the demo step-by-step
