{
  "lib": {
    "/cell-filelink-start.py": {
      "data": "if __name__ == \"__main__\":\n    #test with ipython -i\n    import sys, os\n    class EditPin:\n        def __init__(self, value):\n            self.value = value\n            self.defined = True\n        def set(self, value):\n            print(\"SET\", value)\n            self.value = value\n        def get(self):\n            return self.value\n\n    class Getter:\n        def __init__(self, arg):\n            self.arg = arg\n        def get(self):\n            return self.arg\n\n    value = EditPin(\"test\")\n\n    directory = sys.argv[1]\n    filename = sys.argv[2]\n    filepath = Getter(os.path.join(directory, filename))\n    latency = Getter(float(sys.argv[3]))\n    def serializer(v):\n        return str(v.get())\n    print(\"Edit in \" + filepath.get())\nelse:\n    from seamless.dtypes import serialize\n    def serializer(v):\n        return serialize(v._dtype, v.get())\n\n\nimport os, time, functools\nfrom seamless import add_work\nfrom threading import Thread, RLock\nlast_value = None\nlast_serialized_value = None\n\ndef write_file(fpath):\n    global last_mtime, last_value, last_serialized_value\n    if not value.defined:\n        last_mtime = -1 #will trigger a file read\n        return\n    if last_value == value.get():\n        return\n    val = serializer(value)\n    if last_serialized_value == val:\n        return\n    with lock:\n        if last_serialized_value != val:\n            print(\"WRITE\", val)\n            with open(fpath, \"w\") as f:\n                f.write(val)\n                last_value = value.get()\n                last_serialized_value = val\n            last_time = time.time()\n            try:\n                stat = os.stat(fpath)\n                last_mtime = stat.st_mtime\n            except:\n                pass\n\ndef poll():\n    global last_time, last_mtime, last_value, last_serialized_value\n    fpath = filepath.get()\n    while 1:\n        time.sleep(latency.get())\n        curr_time = time.time()\n        last_time = curr_time\n        if not os.path.exists(fpath):\n            write_file(fpath)\n        else:\n            with lock:\n                stat = os.stat(fpath)\n                if stat.st_mtime > last_mtime:\n                    data = None\n                    with open(fpath) as f:\n                        data = f.read()\n                        print(\"LOAD\", data)\n                    if data is not None:\n                        w = functools.partial(value.set, data)\n                        add_work(w)\n                        last_value = None\n                        last_serialized_value = data\n                    last_mtime = stat.st_mtime\n\nt = Thread(target=poll)\nt.setDaemon(True)\nlock = RLock()\nwrite_file(filepath.get())\nt.start()\n",
      "links": [
        "fl_number.cell1",
        "fl_text.cell1"
      ]
    },
    "/gui/cell-basic_editor_UPDATE.py": {
      "data": "if value.updated:\n    b.setValue(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "ed_number.cell4"
      ]
    },
    "/gui/cell-basic_editor_float.py": {
      "data": "from seamless.qt.QtWidgets import QDoubleSpinBox, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\nvbox.addStretch(1)\nw.setLayout(vbox)\nw.resize(300,100)\nw.setWindowTitle(title.get())\nw.show()\nb = QDoubleSpinBox()\nb.setSingleStep(0.1)\nb.setMaximum(1000000)\nif value.defined:\n    b.setValue(value.get())\nvbox.addWidget(b)\nb.valueChanged.connect(value.set)\n",
      "links": []
    },
    "/gui/cell-basic_editor_int.py": {
      "data": "from seamless.qt.QtWidgets import QSpinBox, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\nvbox.addStretch(1)\nw.setLayout(vbox)\nw.resize(300,100)\nw.setWindowTitle(title.get())\nw.show()\nb = QSpinBox()\nb.setMaximum(1000000)\nif value.defined:\n    b.setValue(value.get())\nvbox.addWidget(b)\nb.valueChanged.connect(value.set)\n",
      "links": [
        "ed_number.cell2"
      ]
    },
    "/gui/cell-basic_editor_json.py": {
      "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\nimport json\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nclass MyTextEdit(QTextEdit):\n    def focusOutEvent(self, event):\n        value.set(self.toPlainText())\n        QTextEdit.focusOutEvent(self, event)\n\nw.show()\nb = MyTextEdit()\nb.setFontPointSize(15)\nif value.defined:\n    b.setText(json.dumps(value.get(), indent=2))\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n",
      "links": []
    },
    "/gui/cell-basic_editor_json_UPDATE.py": {
      "data": "if value.updated:\n    b.setText(json.dumps(value.get(), indent=2))\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": []
    },
    "/gui/cell-basic_editor_text.py": {
      "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nclass MyTextEdit(QTextEdit):\n    def focusOutEvent(self, event):\n        value.set(self.toPlainText())\n        QTextEdit.focusOutEvent(self, event)\n\nw.show()\nb = MyTextEdit()\nb.setFontPointSize(15)\nif value.defined:\n    b.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n",
      "links": [
        "ed_text.cell2"
      ]
    },
    "/gui/cell-basic_editor_text_UPDATE.py": {
      "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "ed_text.cell4"
      ]
    }
  },
  "macro": [
    {
      "with_context": false,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": [
        "json",
        "seamless",
        "editor_params"
      ],
      "module_name": "seamless.core.editor",
      "func_name": "editor",
      "code": "@macro(type=(\"json\", \"seamless\", \"editor_params\"),with_context=False)\ndef editor(kwargs):\n    from seamless.core.editor import Editor #code must be standalone\n    #TODO: remapping, e.g. output_finish, destroy, ...\n    return Editor(kwargs)\n"
    },
    {
      "with_context": false,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": [
        "json",
        "seamless",
        "transformer_params"
      ],
      "module_name": "seamless.core.transformer",
      "func_name": "transformer",
      "code": "@macro(type=(\"json\", \"seamless\", \"transformer_params\"), with_context=False)\ndef transformer(kwargs):\n    from seamless.core.transformer import Transformer #code must be standalone\n    #TODO: remapping, e.g. output_finish, destroy, ...\n    return Transformer(kwargs)\n"
    },
    {
      "with_context": true,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": "str",
      "module_name": "seamless.lib.filelink",
      "func_name": "filelink",
      "code": "@macro(\"str\")\ndef filelink(ctx, cell_type):\n    cell_filelink_start = \"cell-filelink-start.py\" #repeat for inline\n    from seamless import editor\n    pinparams = {\n       \"value\": {\n         \"pin\": \"edit\",\n         \"dtype\": cell_type,\n         \"must_be_defined\": False\n       },\n       \"filepath\" : {\n         \"pin\": \"input\",\n         \"dtype\": \"str\"\n       },\n       \"latency\" : {\n         \"pin\": \"input\",\n         \"dtype\": \"float\"\n       },\n    }\n    ed = ctx.ed = editor(pinparams)\n    ed.code_start.cell().fromfile(cell_filelink_start)\n    ed.code_update.cell().set(\"write_file(filepath.get())\")\n    ed.code_stop.cell().set('t.join(0)')\n    ctx.export(ed)\n"
    },
    {
      "with_context": true,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": {
        "editor_type": "str",
        "title": {
          "default": "Basic editor",
          "type": "str"
        }
      },
      "module_name": "seamless.lib.gui.basic_editor",
      "func_name": "basic_editor",
      "code": "@macro(OrderedDict((\n    (\"editor_type\",\"str\"),\n    (\"title\",{\"type\": \"str\", \"default\": \"Basic editor\"})\n)))\ndef basic_editor(ctx, editor_type, title):\n    from seamless import editor\n\n    _editors = {\n      \"int\": {\n        \"code\": \"cell-basic_editor_int.py\",\n        \"update\": \"cell-basic_editor_UPDATE.py\",\n      },\n      \"float\": {\n        \"code\": \"cell-basic_editor_float.py\",\n        \"update\": \"cell-basic_editor_UPDATE.py\",\n      },\n      \"text\": {\n        \"code\": \"cell-basic_editor_text.py\",\n        \"update\": \"cell-basic_editor_text_UPDATE.py\",\n      },\n      \"json\": {\n        \"code\": \"cell-basic_editor_json.py\",\n        \"update\": \"cell-basic_editor_json_UPDATE.py\",\n      },\n    }\n\n    def _match_type(type, typelist):\n        typelist = list(typelist)\n        type2 = type\n        if isinstance(type, str):\n            type2 = (type,)\n        typelist2 = []\n        for t in typelist:\n            if isinstance(t, str):\n                typelist2.append((t,))\n            else:\n                typelist2.append(t)\n        matches = []\n        for n in range(len(typelist)):\n            ltype = typelist2[n]\n            k = min(len(type2), len(ltype))\n            if type2[:k] == ltype[:k]:\n                matches.append((n, k))\n        if not len(matches):\n            raise TypeError(\"Cannot find editor for cell type '{0}'\".format(type))\n        matches.sort(key=lambda v: -v[1])\n        bestmatch = matches[0][0]\n        return typelist[bestmatch]\n\n    editor_type = _match_type(editor_type, _editors.keys())\n    pinparams = {\n      \"value\": {\n        \"pin\": \"edit\",\n        \"dtype\": editor_type,\n        \"must_be_defined\": False\n      },\n      \"title\": {\n        \"pin\": \"input\",\n        \"dtype\": \"str\",\n      },\n    }\n    ed = ctx.ed = editor(pinparams)\n    ed.title.cell().set(title)\n    ed.code_start.cell().fromfile(_editors[editor_type][\"code\"])\n    ed.code_stop.cell().set('w.destroy()')\n    upfile = _editors[editor_type][\"update\"]\n    c_up = ed.code_update.cell(True)\n    if upfile is not None:\n        c_up.fromfile(upfile)\n    else:\n        c_up.set(\"\")\n    ctx.export(ed, forced=[\"title\"])\n"
    }
  ],
  "main": {
    "type": "context",
    "like_process": false,
    "like_cell": false,
    "pins": {},
    "auto": [
      "cell1",
      "cell2",
      "cell3",
      "cell4"
    ],
    "children": {
      "cell1": {
        "dtype": "str",
        "data": "/tmp/number.txt"
      },
      "cell2": {
        "dtype": "float",
        "data": "0.2"
      },
      "cell3": {
        "dtype": "str",
        "data": "/tmp/text.txt"
      },
      "cell4": {
        "dtype": "float",
        "data": "0.2"
      },
      "ed_number": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "ed_number.ed.title",
          "value": "ed_number.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "dtype": "str",
            "data": "Number"
          },
          "cell2": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_editor_int.py",
              "lib": true,
              "mode": 2
            },
            "data": "from seamless.qt.QtWidgets import QSpinBox, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\nvbox.addStretch(1)\nw.setLayout(vbox)\nw.resize(300,100)\nw.setWindowTitle(title.get())\nw.show()\nb = QSpinBox()\nb.setMaximum(1000000)\nif value.defined:\n    b.setValue(value.get())\nvbox.addWidget(b)\nb.valueChanged.connect(value.set)\n"
          },
          "cell3": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "w.destroy()"
          },
          "cell4": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_editor_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "data": "if value.updated:\n    b.setValue(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
            "owner": "ed_number.ed.code_update"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "dtype": "str",
                "pin": "input"
              },
              "value": {
                "dtype": "int",
                "must_be_defined": false,
                "pin": "edit"
              }
            }
          }
        }
      },
      "ed_text": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "ed_text.ed.title",
          "value": "ed_text.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "dtype": "str",
            "data": "Text"
          },
          "cell2": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_editor_text.py",
              "lib": true,
              "mode": 2
            },
            "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nclass MyTextEdit(QTextEdit):\n    def focusOutEvent(self, event):\n        value.set(self.toPlainText())\n        QTextEdit.focusOutEvent(self, event)\n\nw.show()\nb = MyTextEdit()\nb.setFontPointSize(15)\nif value.defined:\n    b.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n"
          },
          "cell3": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "w.destroy()"
          },
          "cell4": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_editor_text_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
            "owner": "ed_text.ed.code_update"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "dtype": "str",
                "pin": "input"
              },
              "value": {
                "dtype": "text",
                "must_be_defined": false,
                "pin": "edit"
              }
            }
          }
        }
      },
      "fl_number": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "filepath": "fl_number.ed.filepath",
          "latency": "fl_number.ed.latency",
          "value": "fl_number.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3"
        ],
        "children": {
          "cell1": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/cell-filelink-start.py",
              "lib": true,
              "mode": 2
            },
            "data": "if __name__ == \"__main__\":\n    #test with ipython -i\n    import sys, os\n    class EditPin:\n        def __init__(self, value):\n            self.value = value\n            self.defined = True\n        def set(self, value):\n            print(\"SET\", value)\n            self.value = value\n        def get(self):\n            return self.value\n\n    class Getter:\n        def __init__(self, arg):\n            self.arg = arg\n        def get(self):\n            return self.arg\n\n    value = EditPin(\"test\")\n\n    directory = sys.argv[1]\n    filename = sys.argv[2]\n    filepath = Getter(os.path.join(directory, filename))\n    latency = Getter(float(sys.argv[3]))\n    def serializer(v):\n        return str(v.get())\n    print(\"Edit in \" + filepath.get())\nelse:\n    from seamless.dtypes import serialize\n    def serializer(v):\n        return serialize(v._dtype, v.get())\n\n\nimport os, time, functools\nfrom seamless import add_work\nfrom threading import Thread, RLock\nlast_value = None\nlast_serialized_value = None\n\ndef write_file(fpath):\n    global last_mtime, last_value, last_serialized_value\n    if not value.defined:\n        last_mtime = -1 #will trigger a file read\n        return\n    if last_value == value.get():\n        return\n    val = serializer(value)\n    if last_serialized_value == val:\n        return\n    with lock:\n        if last_serialized_value != val:\n            print(\"WRITE\", val)\n            with open(fpath, \"w\") as f:\n                f.write(val)\n                last_value = value.get()\n                last_serialized_value = val\n            last_time = time.time()\n            try:\n                stat = os.stat(fpath)\n                last_mtime = stat.st_mtime\n            except:\n                pass\n\ndef poll():\n    global last_time, last_mtime, last_value, last_serialized_value\n    fpath = filepath.get()\n    while 1:\n        time.sleep(latency.get())\n        curr_time = time.time()\n        last_time = curr_time\n        if not os.path.exists(fpath):\n            write_file(fpath)\n        else:\n            with lock:\n                stat = os.stat(fpath)\n                if stat.st_mtime > last_mtime:\n                    data = None\n                    with open(fpath) as f:\n                        data = f.read()\n                        print(\"LOAD\", data)\n                    if data is not None:\n                        w = functools.partial(value.set, data)\n                        add_work(w)\n                        last_value = None\n                        last_serialized_value = data\n                    last_mtime = stat.st_mtime\n\nt = Thread(target=poll)\nt.setDaemon(True)\nlock = RLock()\nwrite_file(filepath.get())\nt.start()\n"
          },
          "cell2": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "write_file(filepath.get())"
          },
          "cell3": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "t.join(0)"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "filepath": {
                "dtype": "str",
                "pin": "input"
              },
              "latency": {
                "dtype": "float",
                "pin": "input"
              },
              "value": {
                "dtype": "int",
                "must_be_defined": false,
                "pin": "edit"
              }
            }
          }
        }
      },
      "fl_text": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "filepath": "fl_text.ed.filepath",
          "latency": "fl_text.ed.latency",
          "value": "fl_text.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3"
        ],
        "children": {
          "cell1": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/cell-filelink-start.py",
              "lib": true,
              "mode": 2
            },
            "data": "if __name__ == \"__main__\":\n    #test with ipython -i\n    import sys, os\n    class EditPin:\n        def __init__(self, value):\n            self.value = value\n            self.defined = True\n        def set(self, value):\n            print(\"SET\", value)\n            self.value = value\n        def get(self):\n            return self.value\n\n    class Getter:\n        def __init__(self, arg):\n            self.arg = arg\n        def get(self):\n            return self.arg\n\n    value = EditPin(\"test\")\n\n    directory = sys.argv[1]\n    filename = sys.argv[2]\n    filepath = Getter(os.path.join(directory, filename))\n    latency = Getter(float(sys.argv[3]))\n    def serializer(v):\n        return str(v.get())\n    print(\"Edit in \" + filepath.get())\nelse:\n    from seamless.dtypes import serialize\n    def serializer(v):\n        return serialize(v._dtype, v.get())\n\n\nimport os, time, functools\nfrom seamless import add_work\nfrom threading import Thread, RLock\nlast_value = None\nlast_serialized_value = None\n\ndef write_file(fpath):\n    global last_mtime, last_value, last_serialized_value\n    if not value.defined:\n        last_mtime = -1 #will trigger a file read\n        return\n    if last_value == value.get():\n        return\n    val = serializer(value)\n    if last_serialized_value == val:\n        return\n    with lock:\n        if last_serialized_value != val:\n            print(\"WRITE\", val)\n            with open(fpath, \"w\") as f:\n                f.write(val)\n                last_value = value.get()\n                last_serialized_value = val\n            last_time = time.time()\n            try:\n                stat = os.stat(fpath)\n                last_mtime = stat.st_mtime\n            except:\n                pass\n\ndef poll():\n    global last_time, last_mtime, last_value, last_serialized_value\n    fpath = filepath.get()\n    while 1:\n        time.sleep(latency.get())\n        curr_time = time.time()\n        last_time = curr_time\n        if not os.path.exists(fpath):\n            write_file(fpath)\n        else:\n            with lock:\n                stat = os.stat(fpath)\n                if stat.st_mtime > last_mtime:\n                    data = None\n                    with open(fpath) as f:\n                        data = f.read()\n                        print(\"LOAD\", data)\n                    if data is not None:\n                        w = functools.partial(value.set, data)\n                        add_work(w)\n                        last_value = None\n                        last_serialized_value = data\n                    last_mtime = stat.st_mtime\n\nt = Thread(target=poll)\nt.setDaemon(True)\nlock = RLock()\nwrite_file(filepath.get())\nt.start()\n"
          },
          "cell2": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "write_file(filepath.get())"
          },
          "cell3": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "t.join(0)"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "filepath": {
                "dtype": "str",
                "pin": "input"
              },
              "latency": {
                "dtype": "float",
                "pin": "input"
              },
              "value": {
                "dtype": "text",
                "must_be_defined": false,
                "pin": "edit"
              }
            }
          }
        }
      },
      "number": {
        "dtype": "int"
      },
      "text": {
        "dtype": "text"
      }
    },
    "macro_objects": [],
    "macro_listeners": [],
    "registrar_items": [],
    "registrar_listeners": [],
    "registrar_cells": [],
    "pin_cell_connections": [],
    "cell_pin_connections": [
      [
        "cell1",
        "fl_number.ed.filepath"
      ],
      [
        "cell2",
        "fl_number.ed.latency"
      ],
      [
        "cell3",
        "fl_text.ed.filepath"
      ],
      [
        "cell4",
        "fl_text.ed.latency"
      ],
      [
        "ed_number.cell1",
        "ed_number.ed.title"
      ],
      [
        "ed_number.cell2",
        "ed_number.ed.code_start"
      ],
      [
        "ed_number.cell3",
        "ed_number.ed.code_stop"
      ],
      [
        "ed_number.cell4",
        "ed_number.ed.code_update"
      ],
      [
        "ed_text.cell1",
        "ed_text.ed.title"
      ],
      [
        "ed_text.cell2",
        "ed_text.ed.code_start"
      ],
      [
        "ed_text.cell3",
        "ed_text.ed.code_stop"
      ],
      [
        "ed_text.cell4",
        "ed_text.ed.code_update"
      ],
      [
        "fl_number.cell1",
        "fl_number.ed.code_start"
      ],
      [
        "fl_number.cell2",
        "fl_number.ed.code_update"
      ],
      [
        "fl_number.cell3",
        "fl_number.ed.code_stop"
      ],
      [
        "fl_text.cell1",
        "fl_text.ed.code_start"
      ],
      [
        "fl_text.cell2",
        "fl_text.ed.code_update"
      ],
      [
        "fl_text.cell3",
        "fl_text.ed.code_stop"
      ],
      [
        "number",
        "ed_number.ed.value"
      ],
      [
        "number",
        "fl_number.ed.value"
      ],
      [
        "text",
        "ed_text.ed.value"
      ],
      [
        "text",
        "fl_text.ed.value"
      ]
    ]
  }
}