{
  "lib": {
    "/gui/cell-basic_display_text.py": {
      "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nw.show()\nb = QTextEdit()\nb.setReadOnly(True)\nb.setFontPointSize(15)\nb.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n",
      "links": [
        "d_value.cell2"
      ]
    },
    "/gui/cell-basic_display_text_UPDATE.py": {
      "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "d_value.cell4"
      ]
    },
    "/gui/cell-basic_editor_text.py": {
      "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nclass MyTextEdit(QTextEdit):\n    def focusOutEvent(self, event):\n        value.set(self.toPlainText())\n        QTextEdit.focusOutEvent(self, event)\n\nw.show()\nb = MyTextEdit()\nb.setFontPointSize(15)\nb.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n",
      "links": [
        "ed_silk_model.cell2"
      ]
    },
    "/gui/cell-basic_editor_text_UPDATE.py": {
      "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "ed_silk_model.cell4"
      ]
    }
  },
  "macro": [
    {
      "with_context": true,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": "str",
      "module_name": "__main__",
      "func_name": "construct_silk_model",
      "code": "@macro(\"str\")\ndef construct_silk_model(ctx, mode):\n    from seamless import transformer\n    params = {\"value\": {\"pin\": \"output\", \"dtype\": \"text\"}}\n    if mode == \"array\":\n        params[\"N\"] = {\"pin\": \"input\", \"dtype\": \"int\"}\n        code = \"\"\"s = SilkModel()\nreturn str(SilkModelArray([s for n in range(N)]))\n\"\"\"\n    else:\n        code = \"return str(SilkModel())\"\n    ctx.transf = transformer(params)\n    ctx.transf.code.cell().set(code)\n    ctx.registrar.silk.connect(\"SilkModel\", ctx.transf)\n    if mode == \"array\":\n        ctx.registrar.silk.connect(\"SilkModelArray\", ctx.transf)\n    ctx.export(ctx.transf)\n"
    },
    {
      "with_context": false,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": [
        "json",
        "seamless",
        "editor_params"
      ],
      "module_name": "seamless.core.editor",
      "func_name": "editor",
      "code": "@macro(type=(\"json\", \"seamless\", \"editor_params\"),with_context=False)\ndef editor(kwargs):\n    from seamless.core.editor import Editor #code must be standalone\n    #TODO: remapping, e.g. output_finish, destroy, ...\n    return Editor(kwargs)\n"
    },
    {
      "with_context": false,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": [
        "json",
        "seamless",
        "transformer_params"
      ],
      "module_name": "seamless.core.transformer",
      "func_name": "transformer",
      "code": "@macro(type=(\"json\", \"seamless\", \"transformer_params\"), with_context=False)\ndef transformer(kwargs):\n    from seamless.core.transformer import Transformer #code must be standalone\n    #TODO: remapping, e.g. output_finish, destroy, ...\n    return Transformer(kwargs)\n"
    },
    {
      "with_context": true,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": {
        "display_type": "str",
        "title": {
          "default": "Basic display",
          "type": "str"
        }
      },
      "module_name": "seamless.lib.gui.basic_display",
      "func_name": "basic_display",
      "code": "@macro(OrderedDict((\n    (\"display_type\",\"str\"),\n    (\"title\",{\"type\": \"str\", \"default\": \"Basic display\"})\n)))\ndef basic_display(ctx, display_type, title):\n    from seamless import editor\n\n    _displays = {\n      \"int\": {\n        \"code\": \"cell-basic_display_int.py\",\n        \"update\": \"cell-basic_display_UPDATE.py\",\n      },\n      \"float\": {\n        \"code\": \"cell-basic_display_float.py\",\n        \"update\": \"cell-basic_display_UPDATE.py\",\n      },\n      \"text\": {\n        \"code\": \"cell-basic_display_text.py\",\n        \"update\": \"cell-basic_display_text_UPDATE.py\",\n      },\n      \"json\": {\n        \"code\": \"cell-basic_display_json.py\",\n        \"update\": \"cell-basic_display_json_UPDATE.py\",\n      },\n    }\n\n    def _match_type(type, typelist):\n        typelist = list(typelist)\n        type2 = type\n        if isinstance(type, str):\n            type2 = (type,)\n        typelist2 = []\n        for t in typelist:\n            if isinstance(t, str):\n                typelist2.append((t,))\n            else:\n                typelist2.append(t)\n        matches = []\n        for n in range(len(typelist)):\n            ltype = typelist2[n]\n            k = min(len(type2), len(ltype))\n            if type2[:k] == ltype[:k]:\n                matches.append((n, k))\n        if not len(matches):\n            raise TypeError(\"Cannot find display for cell type '{0}'\".format(type))\n        matches.sort(key=lambda v: -v[1])\n        bestmatch = matches[0][0]\n        return typelist[bestmatch]\n\n    display_type = _match_type(display_type, _displays.keys())\n    pinparams = {\n      \"value\": {\n        \"pin\": \"input\",\n        \"dtype\": display_type\n      },\n      \"title\": {\n        \"pin\": \"input\",\n        \"dtype\": \"str\",\n      },\n    }\n    d = ctx.display = editor(pinparams)\n    d.title.cell().set(title)\n    d.code_start.cell().fromfile(_displays[display_type][\"code\"])\n    d.code_stop.cell().set('w.destroy()')\n    upfile = _displays[display_type][\"update\"]\n    c_up = d.code_update.cell()\n    if upfile is not None:\n        c_up.fromfile(upfile)\n    else:\n        c_up.set(\"\")\n    ctx.export(d, forced=[\"title\"])\n"
    },
    {
      "with_context": true,
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "type_args": {
        "editor_type": "str",
        "title": {
          "default": "Basic editor",
          "type": "str"
        }
      },
      "module_name": "seamless.lib.gui.basic_editor",
      "func_name": "basic_editor",
      "code": "@macro(OrderedDict((\n    (\"editor_type\",\"str\"),\n    (\"title\",{\"type\": \"str\", \"default\": \"Basic editor\"})\n)))\ndef basic_editor(ctx, editor_type, title):\n    from seamless import editor\n\n    _editors = {\n      \"int\": {\n        \"code\": \"cell-basic_editor_int.py\",\n        \"update\": \"cell-basic_editor_UPDATE.py\",\n      },\n      \"float\": {\n        \"code\": \"cell-basic_editor_float.py\",\n        \"update\": \"cell-basic_editor_UPDATE.py\",\n      },\n      \"text\": {\n        \"code\": \"cell-basic_editor_text.py\",\n        \"update\": \"cell-basic_editor_text_UPDATE.py\",\n      },\n      \"json\": {\n        \"code\": \"cell-basic_editor_json.py\",\n        \"update\": \"cell-basic_editor_json_UPDATE.py\",\n      },\n    }\n\n    def _match_type(type, typelist):\n        typelist = list(typelist)\n        type2 = type\n        if isinstance(type, str):\n            type2 = (type,)\n        typelist2 = []\n        for t in typelist:\n            if isinstance(t, str):\n                typelist2.append((t,))\n            else:\n                typelist2.append(t)\n        matches = []\n        for n in range(len(typelist)):\n            ltype = typelist2[n]\n            k = min(len(type2), len(ltype))\n            if type2[:k] == ltype[:k]:\n                matches.append((n, k))\n        if not len(matches):\n            raise TypeError(\"Cannot find editor for cell type '{0}'\".format(type))\n        matches.sort(key=lambda v: -v[1])\n        bestmatch = matches[0][0]\n        return typelist[bestmatch]\n\n    editor_type = _match_type(editor_type, _editors.keys())\n    pinparams = {\n      \"value\": {\n        \"pin\": \"edit\",\n        \"dtype\": editor_type\n      },\n      \"title\": {\n        \"pin\": \"input\",\n        \"dtype\": \"str\",\n      },\n    }\n    ed = ctx.ed = editor(pinparams)\n    ed.title.cell().set(title)\n    ed.code_start.cell().fromfile(_editors[editor_type][\"code\"])\n    ed.code_stop.cell().set('w.destroy()')\n    upfile = _editors[editor_type][\"update\"]\n    c_up = ed.code_update.cell(True)\n    if upfile is not None:\n        c_up.fromfile(upfile)\n    else:\n        c_up.set(\"\")\n    ctx.export(ed, forced=[\"title\"])\n"
    }
  ],
  "main": {
    "type": "context",
    "like_process": false,
    "like_cell": false,
    "pins": {},
    "auto": [],
    "children": {
      "cons": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "N": "cons.transf.N",
          "value": "cons.transf.value"
        },
        "auto": [
          "cell1"
        ],
        "children": {
          "cell1": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "s = SilkModel()\nreturn str(SilkModelArray([s for n in range(N)]))\n"
          },
          "transf": {
            "type": "transformer",
            "mode": "thread",
            "params": {
              "N": {
                "dtype": "int",
                "pin": "input"
              },
              "value": {
                "dtype": "text",
                "pin": "output"
              }
            }
          }
        }
      },
      "d_value": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "d_value.display.title",
          "value": "d_value.display.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "dtype": "str",
            "data": "Result"
          },
          "cell2": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_display_text.py",
              "lib": true,
              "mode": 2
            },
            "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nw.show()\nb = QTextEdit()\nb.setReadOnly(True)\nb.setFontPointSize(15)\nb.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n"
          },
          "cell3": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "w.destroy()"
          },
          "cell4": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_display_text_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n"
          },
          "display": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "dtype": "str",
                "pin": "input"
              },
              "value": {
                "dtype": "text",
                "pin": "input"
              }
            }
          }
        },
        "owner": "value"
      },
      "ed_silk_model": {
        "type": "context",
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "ed_silk_model.ed.title",
          "value": "ed_silk_model.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "dtype": "str",
            "data": "Silk model"
          },
          "cell2": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_editor_text.py",
              "lib": true,
              "mode": 2
            },
            "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nclass MyTextEdit(QTextEdit):\n    def focusOutEvent(self, event):\n        value.set(self.toPlainText())\n        QTextEdit.focusOutEvent(self, event)\n\nw.show()\nb = MyTextEdit()\nb.setFontPointSize(15)\nb.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n"
          },
          "cell3": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "data": "w.destroy()"
          },
          "cell4": {
            "dtype": [
              "text",
              "code",
              "python"
            ],
            "resource": {
              "filename": "/gui/cell-basic_editor_text_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
            "owner": "ed_silk_model.ed.code_update"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "dtype": "str",
                "pin": "input"
              },
              "value": {
                "dtype": "text",
                "pin": "edit"
              }
            }
          }
        }
      },
      "mode": {
        "dtype": "str",
        "data": "array"
      },
      "n": {
        "dtype": "int",
        "data": "3"
      },
      "registrar_object1": {
        "registrar": "silk",
        "registered": [
          "SilkModel"
        ],
        "data": "\nType SilkModel {\n  Integer a = 1\n  Float b = 2.0\n  Bool c = True\n  String x = \"OK\"\n}\n",
        "data_name": null
      },
      "silk_model": {
        "dtype": [
          "text",
          "code",
          "silk"
        ],
        "data": "\nType SilkModel {\n  Integer a = 1\n  Float b = 2.0\n  Bool c = True\n  String x = \"OK2\"\n}\n"
      },
      "value": {
        "dtype": "text"
      }
    },
    "macro_objects": [
      {
        "args": [
          null
        ],
        "kwargs": {},
        "cell_args": {
          "_arg1": "mode"
        },
        "macro_module_name": "__main__",
        "macro_func_name": "construct_silk_model",
        "macro_order": 0,
        "target": "cons"
      }
    ],
    "macro_listeners": [
      {
        "cell": "mode",
        "macro_target": "cons",
        "macro_arg": "_arg1"
      }
    ],
    "registrar_items": [
      {
        "registrar_name": "silk",
        "dtype": [
          "text",
          "code",
          "silk"
        ],
        "data": "\nType SilkModel {\n  Integer a = 1\n  Float b = 2.0\n  Bool c = True\n  String x = \"OK\"\n}\n",
        "data_name": null
      }
    ],
    "registrar_listeners": [
      {
        "registrar": "silk",
        "key": "SilkModel",
        "target_type": "process",
        "target_process": "cons.transf",
        "namespace_name": "SilkModel"
      },
      {
        "registrar": "silk",
        "key": "SilkModelArray",
        "target_type": "process",
        "target_process": "cons.transf",
        "namespace_name": "SilkModelArray"
      }
    ],
    "registrar_cells": [
      {
        "cell": "silk_model",
        "macro_target": "registrar_object1",
        "registrar": "silk"
      }
    ],
    "pin_cell_connections": [
      [
        "cons.transf.value",
        "value"
      ]
    ],
    "cell_pin_connections": [
      [
        "cons.cell1",
        "cons.transf.code"
      ],
      [
        "d_value.cell1",
        "d_value.display.title"
      ],
      [
        "d_value.cell2",
        "d_value.display.code_start"
      ],
      [
        "d_value.cell3",
        "d_value.display.code_stop"
      ],
      [
        "d_value.cell4",
        "d_value.display.code_update"
      ],
      [
        "ed_silk_model.cell1",
        "ed_silk_model.ed.title"
      ],
      [
        "ed_silk_model.cell2",
        "ed_silk_model.ed.code_start"
      ],
      [
        "ed_silk_model.cell3",
        "ed_silk_model.ed.code_stop"
      ],
      [
        "ed_silk_model.cell4",
        "ed_silk_model.ed.code_update"
      ],
      [
        "n",
        "cons.transf.N"
      ],
      [
        "silk_model",
        "ed_silk_model.ed.value"
      ],
      [
        "value",
        "d_value.display.value"
      ]
    ]
  }
}