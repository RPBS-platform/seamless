{
  "lib": {
    "/gui/cell-basic_display_UPDATE.py": {
      "data": "if value.updated:\n    b.setValue(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "ed2.cell4"
      ]
    },
    "/gui/cell-basic_display_int.py": {
      "data": "from seamless.qt.QtWidgets import QSpinBox, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\nvbox.addStretch(1)\nw.setLayout(vbox)\nw.resize(300,100)\nw.setWindowTitle(title.get())\nw.show()\nb = QSpinBox()\nb.setMaximum(1000000)\nb.setValue(value.get())\nvbox.addWidget(b)\n",
      "links": [
        "ed2.cell2"
      ]
    },
    "/gui/cell-basic_editor_UPDATE.py": {
      "data": "if value.updated:\n    b.setValue(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "ed1.cell4"
      ]
    },
    "/gui/cell-basic_editor_int.py": {
      "data": "from seamless.qt.QtWidgets import QSpinBox, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\nvbox.addStretch(1)\nw.setLayout(vbox)\nw.resize(300,100)\nw.setWindowTitle(title.get())\nw.show()\nb = QSpinBox()\nb.setMaximum(1000000)\nb.setValue(value.get())\nvbox.addWidget(b)\nb.valueChanged.connect(value.set)\n",
      "links": [
        "ed1.cell2"
      ]
    },
    "/gui/cell-basic_editor_text.py": {
      "data": "from seamless.qt.QtWidgets import QTextEdit, QWidget, QVBoxLayout\nfrom seamless.qt.QtCore import Qt\nfrom PyQt5.QtGui import QColor\n\nw = QWidget()\n#w.setWindowFlags(Qt.WindowStaysOnTopHint)\nw.setAttribute(Qt.WA_ShowWithoutActivating)\nvbox = QVBoxLayout()\n#vbox.addStretch(1)\nw.resize(600,600)\nw.setLayout(vbox)\nw.setWindowTitle(title.get())\n\nclass MyTextEdit(QTextEdit):\n    def focusOutEvent(self, event):\n        value.set(self.toPlainText())\n        QTextEdit.focusOutEvent(self, event)\n\nw.show()\nb = MyTextEdit()\nb.setFontPointSize(15)\nb.setText(value.get())\n#b.setFontItalic(True)\n#b.setTextColor(QColor(255,0,0))\nvbox.addWidget(b)\n",
      "links": [
        "ted1.cell2",
        "meta_ted.cell2"
      ]
    },
    "/gui/cell-basic_editor_text_UPDATE.py": {
      "data": "if value.updated:\n    b.setText(value.get())\nif title.updated:\n    w.setWindowTitle(title.get())\n",
      "links": [
        "ted1.cell4",
        "meta_ted.cell4"
      ]
    }
  },
  "macro": [
    {
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "module_name": "__main__",
      "func_name": "operator",
      "code": "@macro({\"formula\": {\"type\": \"str\", \"default\": \"return value*2\"}})\ndef operator(ctx, formula ):\n    from seamless import cell, transformer\n    tparams = ctx.tparams = cell(\"object\").set(\n    {\n      \"value\": {\n        \"pin\": \"input\",\n        \"dtype\": \"int\"\n      },\n      \"output\": {\n        \"pin\": \"output\",\n        \"dtype\": \"int\"\n      }\n    }\n    )\n\n    cont = ctx.cont = transformer(tparams)\n    c_code = cont.code.cell()\n    c_code.set(formula)\n    ctx.export(cont)\n"
    },
    {
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "module_name": "seamless.core.editor",
      "func_name": "editor",
      "code": "@macro(type=(\"json\", \"seamless\", \"editor_params\"),with_context=False)\ndef editor(kwargs):\n    from seamless.core.editor import Editor #code must be standalone\n    #TODO: remapping, e.g. output_finish, destroy, ...\n    return Editor(kwargs)\n"
    },
    {
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "module_name": "seamless.core.transformer",
      "func_name": "transformer",
      "code": "@macro(type=(\"json\", \"seamless\", \"transformer_params\"), with_context=False)\ndef transformer(kwargs):\n    from seamless.core.transformer import Transformer #code must be standalone\n    #TODO: remapping, e.g. output_finish, destroy, ...\n    return Transformer(kwargs)\n"
    },
    {
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "module_name": "seamless.lib.gui.basic_display",
      "func_name": "basic_display",
      "code": "@macro(OrderedDict((\n    (\"display_type\",\"str\"),\n    (\"title\",{\"type\": \"str\", \"default\": \"Basic display\"})\n)))\ndef basic_display(ctx, display_type, title):\n    from seamless import editor\n\n    _displays = {\n      \"int\": {\n        \"code\": \"cell-basic_display_int.py\",\n        \"update\": \"cell-basic_display_UPDATE.py\",\n      },\n      \"float\": {\n        \"code\": \"cell-basic_display_float.py\",\n        \"update\": \"cell-basic_display_UPDATE.py\",\n      },\n      \"text\": {\n        \"code\": \"cell-basic_display_text.py\",\n        \"update\": \"cell-basic_display_text_UPDATE.py\",\n      },\n      \"json\": {\n        \"code\": \"cell-basic_display_json.py\",\n        \"update\": \"cell-basic_display_json_UPDATE.py\",\n      },\n    }\n\n    def _match_type(type, typelist):\n        typelist = list(typelist)\n        type2 = type\n        if isinstance(type, str):\n            type2 = (type,)\n        typelist2 = []\n        for t in typelist:\n            if isinstance(t, str):\n                typelist2.append((t,))\n            else:\n                typelist2.append(t)\n        matches = []\n        for n in range(len(typelist)):\n            ltype = typelist2[n]\n            k = min(len(type2), len(ltype))\n            if type2[:k] == ltype[:k]:\n                matches.append((n, k))\n        if not len(matches):\n            raise TypeError(\"Cannot find display for cell type '{0}'\".format(type))\n        matches.sort(key=lambda v: -v[1])\n        bestmatch = matches[0][0]\n        return typelist[bestmatch]\n\n    display_type = _match_type(display_type, _displays.keys())\n    pinparams = {\n      \"value\": {\n        \"pin\": \"input\",\n        \"dtype\": display_type\n      },\n      \"title\": {\n        \"pin\": \"input\",\n        \"dtype\": \"str\",\n      },\n    }\n    d = ctx.display = editor(pinparams)\n    d.title.cell().set(title)\n    d.code_start.cell().fromfile(_displays[display_type][\"code\"])\n    d.code_stop.cell().set('w.destroy()')\n    upfile = _displays[display_type][\"update\"]\n    c_up = d.code_update.cell()\n    if upfile is not None:\n        c_up.fromfile(upfile)\n    else:\n        c_up.set(\"\")\n    ctx.export(d, forced=[\"title\"])\n"
    },
    {
      "dtype": [
        "text",
        "code",
        "python"
      ],
      "module_name": "seamless.lib.gui.basic_editor",
      "func_name": "basic_editor",
      "code": "@macro(OrderedDict((\n    (\"editor_type\",\"str\"),\n    (\"title\",{\"type\": \"str\", \"default\": \"Basic editor\"})\n)))\ndef basic_editor(ctx, editor_type, title):\n    from seamless import editor\n\n    _editors = {\n      \"int\": {\n        \"code\": \"cell-basic_editor_int.py\",\n        \"update\": \"cell-basic_editor_UPDATE.py\",\n      },\n      \"float\": {\n        \"code\": \"cell-basic_editor_float.py\",\n        \"update\": \"cell-basic_editor_UPDATE.py\",\n      },\n      \"text\": {\n        \"code\": \"cell-basic_editor_text.py\",\n        \"update\": \"cell-basic_editor_text_UPDATE.py\",\n      },\n      \"json\": {\n        \"code\": \"cell-basic_editor_json.py\",\n        \"update\": \"cell-basic_editor_json_UPDATE.py\",\n      },\n    }\n\n    def _match_type(type, typelist):\n        typelist = list(typelist)\n        type2 = type\n        if isinstance(type, str):\n            type2 = (type,)\n        typelist2 = []\n        for t in typelist:\n            if isinstance(t, str):\n                typelist2.append((t,))\n            else:\n                typelist2.append(t)\n        matches = []\n        for n in range(len(typelist)):\n            ltype = typelist2[n]\n            k = min(len(type2), len(ltype))\n            if type2[:k] == ltype[:k]:\n                matches.append((n, k))\n        if not len(matches):\n            raise TypeError(\"Cannot find editor for cell type '{0}'\".format(type))\n        matches.sort(key=lambda v: -v[1])\n        bestmatch = matches[0][0]\n        return typelist[bestmatch]\n\n    editor_type = _match_type(editor_type, _editors.keys())\n    pinparams = {\n      \"value\": {\n        \"pin\": \"edit\",\n        \"dtype\": editor_type\n      },\n      \"title\": {\n        \"pin\": \"input\",\n        \"dtype\": \"str\",\n      },\n    }\n    ed = ctx.ed = editor(pinparams)\n    ed.title.cell().set(title)\n    ed.code_start.cell().fromfile(_editors[editor_type][\"code\"])\n    ed.code_stop.cell().set('w.destroy()')\n    upfile = _editors[editor_type][\"update\"]\n    c_up = ed.code_update.cell(True)\n    if upfile is not None:\n        c_up.fromfile(upfile)\n    else:\n        c_up.set(\"\")\n    ctx.export(ed, forced=[\"title\"])\n"
    }
  ],
  "main": {
    "like_process": false,
    "like_cell": false,
    "pins": {},
    "auto": [
      "cell1",
      "cell2",
      "ctx1"
    ],
    "children": {
      "cell1": {
        "data": "5"
      },
      "cell2": {},
      "ctx1": {
        "like_process": true,
        "like_cell": false,
        "pins": {
          "output": "ctx1.cont.output",
          "value": "ctx1.cont.value"
        },
        "auto": [
          "cell1"
        ],
        "children": {
          "cell1": {
            "data": "return value*3"
          },
          "cont": {
            "type": "transformer",
            "mode": "thread",
            "params": {
              "output": {
                "pin": "output",
                "dtype": "int"
              },
              "value": {
                "pin": "input",
                "dtype": "int"
              }
            }
          },
          "tparams": {
            "data": {
              "output": {
                "pin": "output",
                "dtype": "int"
              },
              "value": {
                "pin": "input",
                "dtype": "int"
              }
            }
          }
        }
      },
      "ed1": {
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "ed1.ed.title",
          "value": "ed1.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "data": "Input"
          },
          "cell2": {
            "resource": {
              "filename": "/gui/cell-basic_editor_int.py",
              "lib": true,
              "mode": 2
            }
          },
          "cell3": {
            "data": "w.destroy()"
          },
          "cell4": {
            "resource": {
              "filename": "/gui/cell-basic_editor_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "owner": "ed1.ed.code_update"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "pin": "input",
                "dtype": "str"
              },
              "value": {
                "pin": "edit",
                "dtype": "int"
              }
            }
          }
        }
      },
      "ed2": {
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "ed2.display.title",
          "value": "ed2.display.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "data": "Output"
          },
          "cell2": {
            "resource": {
              "filename": "/gui/cell-basic_display_int.py",
              "lib": true,
              "mode": 2
            }
          },
          "cell3": {
            "data": "w.destroy()"
          },
          "cell4": {
            "resource": {
              "filename": "/gui/cell-basic_display_UPDATE.py",
              "lib": true,
              "mode": 2
            }
          },
          "display": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "pin": "input",
                "dtype": "str"
              },
              "value": {
                "pin": "input",
                "dtype": "int"
              }
            }
          }
        },
        "owner": "cell2"
      },
      "meta_ted": {
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "meta_ted.ed.title",
          "value": "meta_ted.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "data": "Meta-editor"
          },
          "cell2": {
            "resource": {
              "filename": "/gui/cell-basic_editor_text.py",
              "lib": true,
              "mode": 2
            }
          },
          "cell3": {
            "data": "w.destroy()"
          },
          "cell4": {
            "resource": {
              "filename": "/gui/cell-basic_editor_text_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "owner": "meta_ted.ed.code_update"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "pin": "input",
                "dtype": "str"
              },
              "value": {
                "pin": "edit",
                "dtype": "text"
              }
            }
          }
        }
      },
      "ted1": {
        "like_process": true,
        "like_cell": false,
        "pins": {
          "title": "ted1.ed.title",
          "value": "ted1.ed.value"
        },
        "auto": [
          "cell1",
          "cell2",
          "cell3",
          "cell4"
        ],
        "children": {
          "cell1": {
            "data": "Formula editor"
          },
          "cell2": {
            "resource": {
              "filename": "/gui/cell-basic_editor_text.py",
              "lib": true,
              "mode": 2
            }
          },
          "cell3": {
            "data": "w.destroy()"
          },
          "cell4": {
            "resource": {
              "filename": "/gui/cell-basic_editor_text_UPDATE.py",
              "lib": true,
              "mode": 2
            },
            "owner": "ted1.ed.code_update"
          },
          "ed": {
            "type": "editor",
            "mode": "sync",
            "params": {
              "title": {
                "pin": "input",
                "dtype": "str"
              },
              "value": {
                "pin": "edit",
                "dtype": "text"
              }
            }
          }
        }
      }
    },
    "macro_objects": [
      {
        "args": {},
        "cell_args": {
          "_arg1": "ctx1.tparams"
        },
        "macro_module_name": "seamless.core.transformer",
        "macro_func_name": "transformer",
        "macro_order": 0,
        "target": "ctx1.cont"
      }
    ],
    "macro_listeners": [
      {
        "cell": "ctx1.tparams",
        "macro_target": "ctx1.cont",
        "macro_arg": "_arg1"
      }
    ],
    "registrar_items": [],
    "registrar_listeners": [],
    "registrar_cells": [],
    "pin_cell_connections": [
      [
        "ctx1.cont.output",
        "cell2"
      ]
    ],
    "cell_pin_connections": [
      [
        "cell2",
        "ed2.display.value"
      ],
      [
        "ed2.cell1",
        "ed2.display.title"
      ],
      [
        "ctx1.cell1",
        "ctx1.cont.code"
      ],
      [
        "ctx1.cell1",
        "ted1.ed.value"
      ],
      [
        "ed1.cell4",
        "ed1.ed.code_update"
      ],
      [
        "cell1",
        "ctx1.cont.value"
      ],
      [
        "cell1",
        "ed1.ed.value"
      ],
      [
        "ted1.cell3",
        "ted1.ed.code_stop"
      ],
      [
        "ted1.cell1",
        "ted1.ed.title"
      ],
      [
        "meta_ted.cell2",
        "meta_ted.ed.code_start"
      ],
      [
        "ed1.cell1",
        "ed1.ed.title"
      ],
      [
        "ed2.cell2",
        "ed2.display.code_start"
      ],
      [
        "ed2.cell4",
        "ed2.display.code_update"
      ],
      [
        "ted1.cell2",
        "ted1.ed.code_start"
      ],
      [
        "ted1.cell2",
        "meta_ted.ed.value"
      ],
      [
        "ed2.cell3",
        "ed2.display.code_stop"
      ],
      [
        "meta_ted.cell1",
        "meta_ted.ed.title"
      ],
      [
        "ed1.cell2",
        "ed1.ed.code_start"
      ],
      [
        "ted1.cell4",
        "ted1.ed.code_update"
      ],
      [
        "ed1.cell3",
        "ed1.ed.code_stop"
      ],
      [
        "meta_ted.cell3",
        "meta_ted.ed.code_stop"
      ],
      [
        "meta_ted.cell4",
        "meta_ted.ed.code_update"
      ]
    ]
  }
}