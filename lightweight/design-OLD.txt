FULLY OUTDATED???

"Primitive schema"
A primitive schema has the following attributes:
-  Value of the primitive command: points, lines, line_strip, line_loop, triangles, triange_strip or triangle_fan
-  "Data access pattern (DAP)" of the "primitive command classifier" 
-  DAP of the "vertex length"
- "Data schema" of all "attributes"
- "Name" of the "shader program class"
A primitive schema is always defined under a primitive schema "name", and is stored in the 'schema::' "namespace"


"primitive command classifier"
String. Primitives with different primitive command classifiers will never be rendered in the same "rendercall"

"primitive prototype"
A primitive prototype is a primitive schema where part (but not all) of the "attributes" have their "Data access pattern (DAP)" specified.
A primitive prototype has the following attributes
- "Extended name" of the "primitive schema" (schema::) or primitive prototype (primclass::) from which this prototype derives
- "Data access pattern (DAP)" of one or more "attributes"
A primitive prototype is always defined under a primitive prototype "name", and is stored in the 'prototype::' "namespace"

"primitive class"
A primitive prototype is a primitive schema where all of the "attributes" have their "Data access pattern (DAP)" specified.
A primitive prototype has the following attributes
- "Extended name" of the "primitive schema" (schema::) or primitive prototype (prototype::) from which this primitive class derives
- batched or single. If batched, all primitives of this class are rendered as a single "rendercall", as long as they have the same values for "shader program" and "vertex length"


"rendercall". A rendercall is essentially one or more "primitives", all with the same shaders, the same "primitive command classifier" and the same vertex length. Each rendercall corresponds to a VBA + an OpenGL render command.

